package comcmput301f16t01.github.carrier.Notifications;

import android.support.annotation.NonNull;
import android.util.Log;

import com.google.gson.Gson;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Collections;

import comcmput301f16t01.github.carrier.Requests.Request;
import comcmput301f16t01.github.carrier.Users.User;

/**
 * Controller pattern. Allows a view to get information about notifications and/or allows
 * other controllers to set up new notifications.
 *
 * @see comcmput301f16t01.github.carrier.Requests.RequestController
 */
public class NotificationController {
    private static ArrayList<Notification> notificationList;

    /**
     * Notifications from offline tasks that must be sent when we regain connection.
     */
    private static final ArrayList<Notification> offlineNotifications = new ArrayList<>();

    /** The file name of the locally saved notifications .*/
    private static final String NOTIF_FILENAME = "Notifications.sav";

    /**
     * @return A sorted NotificationList
     * @see Notification#compareTo(Notification)
     */
    public ArrayList<Notification> fetchNotifications( User user ) {
        ElasticNotificationController.FindNotificationTask fnt = new ElasticNotificationController.FindNotificationTask();
        fnt.execute( user.getUsername() );
        try {
            notificationList = fnt.get();
            Collections.sort(notificationList);
        } catch (Exception e) {
            Log.i("NotificationController", "bad error");
        }
        return notificationList;
    }

    /**
     * @return true, if an unread notification exists. false otherwise
     */
    public boolean unreadNotification( User user ) {
        fetchNotifications( user );
        for ( Notification notification : notificationList ) {
            if (!notification.isRead()) {
                return true;
            }
        }
        return false;
    }

    /**
     * Clears all notifications for a user.
     *
     * @param user A user is anyone who uses our app. This is who we clear notifications for
     */
    public void clearAllNotifications( User user ) {
        ElasticNotificationController.ClearAllTask cat = new ElasticNotificationController.ClearAllTask();
        cat.execute( user.getUsername() );
        try {
            cat.get();
        } catch (Exception e) {
            // Make the Async insync
            e.printStackTrace();
        }
        if (notificationList != null) {
            notificationList.clear();
        }
    }

    /**
     * Allows the creation of a new notification.
     *
     * @param userToAlert The user to send the notification to
     * @param relatedRequest The request that this notification is about.
     * @return the notification generated by this method
     */
    public Notification addNotification(@NonNull User userToAlert, @NonNull Request relatedRequest) {
        Notification newNotification = new Notification( userToAlert, relatedRequest );

        if(ConnectionChecker.isThereInternet()) {
            ElasticNotificationController.AddNotificationTask ant = new ElasticNotificationController.AddNotificationTask();
            ant.execute(newNotification);
        } else {
            offlineNotifications.add(newNotification);
            saveOfflineNotifications();
        }
        return newNotification;
    }

    private void saveOfflineNotifications() {
    }

    /**
     * Marks the given notification as read in elastic search.
     *
     * @param notification This is a message that is sent to a user
     */
    public void markNotificationAsRead( Notification notification ) {
        ElasticNotificationController.MarkAsReadTask mart = new ElasticNotificationController.MarkAsReadTask();
        mart.execute( notification.getID() );
        try {
            mart.get();
        } catch (Exception e) {
            e.printStackTrace();
        }
        notification.setRead( true );
    }

    /**
     * Marks all request for user as read, if they are currently unread.
     *
     * @param user A user is anyone who uses our app. This is who we will clear notifications for.
     */
    public void markAllAsRead( User user ) {
        ArrayList<Notification> notificationList = this.fetchNotifications( user );
        for (Notification notification : notificationList ) {
            if( !notification.isRead() ) {
                this.markNotificationAsRead(notification);
            }
        }
    }
}
