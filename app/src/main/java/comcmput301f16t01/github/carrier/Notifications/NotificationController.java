package comcmput301f16t01.github.carrier.Notifications;

import android.content.Context;
import android.os.health.SystemHealthManager;
import android.provider.Settings;
import android.support.annotation.NonNull;
import android.util.Log;

import java.util.Collection;
import java.util.Collections;
import java.util.concurrent.ExecutionException;

import comcmput301f16t01.github.carrier.Request;
import comcmput301f16t01.github.carrier.User;

/**
 * Elastic Search in between...?
 */
public class NotificationController {
    // private NotificationList notificationList;

    /**
     * @return A sorted NotificationList
     */
    public NotificationList fetchNotifications( User user ) {
        ElasticNotificationController.FindNotificationTask fnt = new ElasticNotificationController.FindNotificationTask();
        fnt.execute( user.getUsername() );
        NotificationList notificationList = new NotificationList();
        try {
            notificationList = fnt.get();
            Collections.sort(notificationList);
        } catch (Exception e) {
            Log.i("NotificationController", "bad error");
        }
        return notificationList;
    }

    public void clearAllNotifications( User user ) {
        ElasticNotificationController.ClearAllTask cat = new ElasticNotificationController.ClearAllTask();
        cat.execute( user.getUsername() );
        try {
            cat.get();
        } catch (Exception e) {
            // Make the Async insync
            e.printStackTrace();
        }
    }

    /**
     * @return the notification generated by this method
     */
    public Notification addNotification(@NonNull User userToAlert, @NonNull Request relatedRequest) {
        ElasticNotificationController.AddNotificationTask ant = new ElasticNotificationController.AddNotificationTask();
        Notification newNotification = new Notification( userToAlert, relatedRequest );
        ant.execute( newNotification );
        try {
            ant.get();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newNotification;
    }

    public void markNotificationAsRead( Notification notification ) {
        ElasticNotificationController.MarkAsReadTask mart = new ElasticNotificationController.MarkAsReadTask();
        mart.execute( notification.getID() );
        try {
            mart.get();
        } catch (Exception e) {
            e.printStackTrace();
        }
        notification.setRead( true );
    }
}
